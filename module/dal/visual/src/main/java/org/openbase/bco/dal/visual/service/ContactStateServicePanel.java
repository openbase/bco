package org.openbase.bco.dal.visual.service;

/*
 * #%L
 * BCO DAL Visualisation
 * %%
 * Copyright (C) 2014 - 2021 openbase.org
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import org.openbase.bco.dal.lib.layer.service.provider.ContactStateProviderService;
import org.openbase.jul.exception.CouldNotPerformException;
import org.openbase.jul.exception.InvalidStateException;
import org.openbase.jul.exception.printer.ExceptionPrinter;
import org.openbase.jul.exception.printer.LogLevel;
import org.openbase.jul.processing.StringProcessor;
import java.awt.Color;
import org.openbase.bco.dal.lib.layer.service.consumer.ConsumerService;
import org.openbase.bco.dal.lib.layer.service.operation.OperationService;

/**
 *
 * * @author kengelma
 */
public class ContactStateServicePanel extends AbstractServicePanel<ContactStateProviderService, ConsumerService, OperationService> {

    /**
     * Creates new form ReedSwitchProviderPanel
     * @throws org.openbase.jul.exception.InstantiationException can't instantiate
     */
    public ContactStateServicePanel() throws org.openbase.jul.exception.InstantiationException  {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reedSwitchStatePanel = new javax.swing.JPanel();
        reedSwitchStateLabel = new javax.swing.JLabel();

        reedSwitchStatePanel.setBackground(new java.awt.Color(204, 204, 204));
        reedSwitchStatePanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        reedSwitchStatePanel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        reedSwitchStateLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        reedSwitchStateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reedSwitchStateLabel.setText("ReedSwitchState");
        reedSwitchStateLabel.setFocusable(false);
        reedSwitchStateLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout reedSwitchStatePanelLayout = new javax.swing.GroupLayout(reedSwitchStatePanel);
        reedSwitchStatePanel.setLayout(reedSwitchStatePanelLayout);
        reedSwitchStatePanelLayout.setHorizontalGroup(
            reedSwitchStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reedSwitchStateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        reedSwitchStatePanelLayout.setVerticalGroup(
            reedSwitchStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(reedSwitchStateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reedSwitchStatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(reedSwitchStatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel reedSwitchStateLabel;
    private javax.swing.JPanel reedSwitchStatePanel;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void updateDynamicComponents() {        
        try {
            switch (getProviderService().getContactState().getValue()) {
                case UNKNOWN:
                    reedSwitchStateLabel.setForeground(Color.DARK_GRAY);
                    reedSwitchStatePanel.setBackground(Color.ORANGE.darker());
                    break;
                case CLOSED:
                    reedSwitchStateLabel.setForeground(Color.WHITE);
                    reedSwitchStatePanel.setBackground(Color.BLUE);
                    break;
                case OPEN:
                    reedSwitchStateLabel.setForeground(Color.WHITE);
                    reedSwitchStatePanel.setBackground(Color.GREEN.darker());
                    break;
                default:
                    throw new InvalidStateException("State[" + getProviderService().getContactState().getValue() + "] is unknown.");
            }
            reedSwitchStateLabel.setText("Current ReedState = " + StringProcessor.transformUpperCaseToPascalCase(getProviderService().getContactState().getValue().name()));
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(ex, logger, LogLevel.ERROR);
        }
    }
}
