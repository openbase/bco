package org.openbase.bco.dal.visual.service;

/*-
 * #%L
 * BCO DAL Visualisation
 * %%
 * Copyright (C) 2014 - 2021 openbase.org
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */
import java.awt.Color;
import javax.swing.DefaultComboBoxModel;
import org.openbase.bco.dal.lib.layer.service.consumer.ConsumerService;
import org.openbase.bco.dal.lib.layer.service.operation.UserTransitStateOperationService;
import org.openbase.bco.dal.lib.layer.service.provider.UserTransitStateProviderService;
import org.openbase.jul.exception.CouldNotPerformException;
import org.openbase.jul.exception.InvalidStateException;
import org.openbase.jul.exception.printer.ExceptionPrinter;
import org.openbase.jul.processing.StringProcessor;
import org.openbase.type.domotic.state.UserTransitStateType.UserTransitState;

/**
 *
 * @author <a href="mailto:pLeminoq@openbase.org">Tamino Huxohl</a>
 */
public class UserTransitStateServicePanel extends AbstractServicePanel<UserTransitStateProviderService, ConsumerService, UserTransitStateOperationService> {

    /**
     * Creates new form ActivityStateServicePanel
     *
     * @throws org.openbase.jul.exception.InstantiationException
     */
    public UserTransitStateServicePanel() throws org.openbase.jul.exception.InstantiationException {
        initComponents();
        userTransitStateComboBox.setModel(new DefaultComboBoxModel(UserTransitState.State.values()));
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userTransitStatePanel = new javax.swing.JPanel();
        userTransitStateLabel = new javax.swing.JLabel();
        userTransitStateComboBox = new javax.swing.JComboBox();

        userTransitStatePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        userTransitStateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userTransitStateLabel.setText("ActivityState");

        javax.swing.GroupLayout userTransitStatePanelLayout = new javax.swing.GroupLayout(userTransitStatePanel);
        userTransitStatePanel.setLayout(userTransitStatePanelLayout);
        userTransitStatePanelLayout.setHorizontalGroup(
            userTransitStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userTransitStateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
        );
        userTransitStatePanelLayout.setVerticalGroup(
            userTransitStatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userTransitStateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        userTransitStateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        userTransitStateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTransitStateComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userTransitStatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(userTransitStateComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(userTransitStatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userTransitStateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void userTransitStateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTransitStateComboBoxActionPerformed
        UserTransitState.State userTransitState = (UserTransitState.State) userTransitStateComboBox.getModel().getSelectedItem();
        try {
            notifyActionProcessing(getOperationService().setUserTransitState(userTransitState));
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(new CouldNotPerformException("Could not set user presence state!", ex), logger);
        }
    }//GEN-LAST:event_userTransitStateComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox userTransitStateComboBox;
    private javax.swing.JLabel userTransitStateLabel;
    private javax.swing.JPanel userTransitStatePanel;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void updateDynamicComponents() {
        try {
            logger.debug("state: " + getProviderService().getUserTransitState().getValue().name());
            switch (getProviderService().getUserTransitState().getValue()) {
                case LONG_TERM_PRESENT:
                    userTransitStateLabel.setForeground(Color.BLACK);
                    userTransitStatePanel.setBackground(Color.GREEN.darker());
                    break;
                case LONG_TERM_ABSENT:
                    userTransitStateLabel.setForeground(Color.LIGHT_GRAY);
                    userTransitStatePanel.setBackground(Color.GRAY.darker());
                    break;
                case SHORT_TERM_PRESENT:
                    userTransitStateLabel.setForeground(Color.BLACK);
                    userTransitStatePanel.setBackground(Color.CYAN.brighter());
                    break;
                case SHORT_TERM_ABSENT:
                    userTransitStateLabel.setForeground(Color.BLACK);
                    userTransitStatePanel.setBackground(Color.CYAN.darker());
                    break;
                case SOON_PRESENT:
                    userTransitStateLabel.setForeground(Color.BLACK);
                    userTransitStatePanel.setBackground(Color.GREEN.darker().darker());
                    break;
                case SOON_ABSENT:
                    userTransitStateLabel.setForeground(Color.BLACK);
                    userTransitStatePanel.setBackground(Color.GREEN.darker().darker());
                    break;
                case UNKNOWN:
                    userTransitStateLabel.setForeground(Color.BLACK);
                    userTransitStatePanel.setBackground(Color.ORANGE.darker());
                    break;
                default:
                    throw new InvalidStateException("State[" + getProviderService().getUserTransitState().getValue() + "] is unknown.");
            }
            userTransitStateComboBox.getModel().setSelectedItem(getProviderService().getUserTransitState().getValue());
            userTransitStateLabel.setText("Current UserTransitState = " + StringProcessor.transformUpperCaseToPascalCase(getProviderService().getUserTransitState().getValue().name()));
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(ex, logger);
        }
    }
}
