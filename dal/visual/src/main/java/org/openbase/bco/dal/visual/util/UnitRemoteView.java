package org.openbase.bco.dal.visual.util;

/*
 * #%L
 * BCO DAL Visualisation
 * %%
 * Copyright (C) 2014 - 2021 openbase.org
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import com.google.protobuf.Message;
import org.openbase.bco.dal.remote.layer.unit.AbstractUnitRemote;
import org.openbase.bco.dal.remote.layer.unit.Units;
import org.openbase.jul.exception.CouldNotPerformException;
import org.openbase.jul.exception.NotAvailableException;
import org.openbase.jul.exception.printer.ExceptionPrinter;
import org.openbase.jul.extension.type.processing.ScopeProcessor;
import org.openbase.jul.iface.Shutdownable;
import org.openbase.jul.pattern.Observer;
import org.openbase.jul.pattern.provider.DataProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.openbase.type.domotic.unit.UnitConfigType.UnitConfig;
import org.openbase.type.communication.ScopeType.Scope;

/**
 * @param <RS>
 * @author <a href="mailto:divine@openbase.org">Divine Threepwood</a>
 */
public abstract class UnitRemoteView<RS extends AbstractUnitRemote<Message>> extends javax.swing.JPanel implements Observer<DataProvider<Message>, Message>, Shutdownable {

    protected final Logger logger = LoggerFactory.getLogger(getClass());

    private RS unitRemote;

    /**
     * Creates new form RSBViewService
     */
    public UnitRemoteView() {
        this.initComponents();
    }

    private synchronized void setRemoteService(final RS remoteService) {
        if (this.unitRemote != null) {
            this.unitRemote.removeDataObserver(this);
        }

        this.unitRemote = remoteService;
        this.unitRemote.addDataObserver(this);
    }

    @Override
    public synchronized void shutdown() {
        if (unitRemote == null) {
            return;
        }
        unitRemote.removeDataObserver(this);
    }

    @Override
    public void update(final DataProvider<Message> source, Message data) {
        try {
            updateDynamicComponents(data);
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(new CouldNotPerformException("Could not update unit remote view!", ex), logger);
        }
    }

    public RS getRemoteService() throws NotAvailableException {
        if (unitRemote == null) {
            throw new NotAvailableException("remoteService");
        }
        return unitRemote;
    }

    public void setUnitRemote(final Scope scope) throws CouldNotPerformException, InterruptedException {
        try {
            logger.info("Setup unit remote: " + ScopeProcessor.generateStringRep(scope));
            RS remote = (RS) Units.getUnitByScope(scope, false);
            setRemoteService(remote);
        } catch (CouldNotPerformException ex) {
            throw new CouldNotPerformException("Could not setup unit remote config!", ex);
        }
    }

    public RS setUnitRemote(final UnitConfig unitConfig) throws CouldNotPerformException, InterruptedException {
        logger.info("Setup unit remote: " + unitConfig.getId());
        try {
            RS remote = (RS) Units.getUnit(unitConfig, false);
            setRemoteService(remote);
            return remote;
        } catch (CouldNotPerformException ex) {
            throw new CouldNotPerformException("Could not setup unit remote config!", ex);
        }
    }

    protected abstract void updateDynamicComponents(Message data) throws CouldNotPerformException;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
