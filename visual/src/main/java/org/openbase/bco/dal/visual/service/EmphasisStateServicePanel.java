package org.openbase.bco.dal.visual.service;

/*
 * #%L
 * BCO DAL Visualisation
 * %%
 * Copyright (C) 2014 - 2021 openbase.org
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */
import java.awt.Color;
import java.text.DecimalFormat;
import org.openbase.bco.dal.lib.layer.service.consumer.ConsumerService;
import org.openbase.bco.dal.lib.layer.service.operation.EmphasisStateOperationService;
import org.openbase.bco.dal.lib.layer.service.provider.EmphasisStateProviderService;
import org.openbase.jul.exception.CouldNotPerformException;
import org.openbase.jul.exception.printer.ExceptionPrinter;
import org.openbase.jul.exception.printer.LogLevel;
import org.openbase.type.domotic.action.ActionEmphasisType.ActionEmphasis;
import org.openbase.type.domotic.action.ActionEmphasisType.ActionEmphasis.Category;
import org.openbase.type.domotic.state.EmphasisStateType.EmphasisState;

/**
 *
 * @author <a href="mailto:divine@openbase.org">Divine Threepwood</a>
 */
public class EmphasisStateServicePanel extends AbstractServicePanel<EmphasisStateProviderService, ConsumerService, EmphasisStateOperationService> {

    /**
     * Creates new form BrightnessService
     *
     * @throws org.openbase.jul.exception.InstantiationException
     */
    public EmphasisStateServicePanel() throws org.openbase.jul.exception.InstantiationException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        providerPanel = new javax.swing.JPanel();
        emphasisLevelLabelPanel = new javax.swing.JPanel();
        emphasisLevelLabel = new javax.swing.JLabel();
        economyBar = new javax.swing.JProgressBar();
        comfortBar = new javax.swing.JProgressBar();
        securityBar = new javax.swing.JProgressBar();
        operationPanel = new javax.swing.JPanel();
        securitySlider = new javax.swing.JSlider();
        economySlider = new javax.swing.JSlider();
        comfortSlider = new javax.swing.JSlider();

        emphasisLevelLabelPanel.setBackground(new java.awt.Color(204, 204, 204));
        emphasisLevelLabelPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        emphasisLevelLabelPanel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N

        emphasisLevelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        emphasisLevelLabel.setText("---");
        emphasisLevelLabel.setDoubleBuffered(true);
        emphasisLevelLabel.setFocusable(false);
        emphasisLevelLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout emphasisLevelLabelPanelLayout = new javax.swing.GroupLayout(emphasisLevelLabelPanel);
        emphasisLevelLabelPanel.setLayout(emphasisLevelLabelPanelLayout);
        emphasisLevelLabelPanelLayout.setHorizontalGroup(
            emphasisLevelLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(emphasisLevelLabelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(emphasisLevelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        emphasisLevelLabelPanelLayout.setVerticalGroup(
            emphasisLevelLabelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(emphasisLevelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
        );

        economyBar.setString("0 % Economy");
        economyBar.setStringPainted(true);

        comfortBar.setString("0 % Comfort");
        comfortBar.setStringPainted(true);

        securityBar.setName(""); // NOI18N
        securityBar.setString("0 % Security");
        securityBar.setStringPainted(true);

        javax.swing.GroupLayout providerPanelLayout = new javax.swing.GroupLayout(providerPanel);
        providerPanel.setLayout(providerPanelLayout);
        providerPanelLayout.setHorizontalGroup(
            providerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(emphasisLevelLabelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(providerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(providerPanelLayout.createSequentialGroup()
                    .addGap(9, 9, 9)
                    .addGroup(providerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(economyBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comfortBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(securityBar, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(9, 9, 9)))
        );
        providerPanelLayout.setVerticalGroup(
            providerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(providerPanelLayout.createSequentialGroup()
                .addComponent(emphasisLevelLabelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
            .addGroup(providerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, providerPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(securityBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(economyBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(comfortBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        securityBar.getAccessibleContext().setAccessibleName("");
        securityBar.getAccessibleContext().setAccessibleDescription("");

        securitySlider.setMajorTickSpacing(10);
        securitySlider.setPaintTicks(true);
        securitySlider.setName("Security"); // NOI18N
        securitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                securitySliderStateChanged(evt);
            }
        });
        securitySlider.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                securitySliderPropertyChange(evt);
            }
        });

        economySlider.setMajorTickSpacing(10);
        economySlider.setPaintTicks(true);
        economySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                economySliderStateChanged(evt);
            }
        });
        economySlider.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                economySliderPropertyChange(evt);
            }
        });

        comfortSlider.setMajorTickSpacing(10);
        comfortSlider.setPaintTicks(true);
        comfortSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                comfortSliderStateChanged(evt);
            }
        });
        comfortSlider.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                comfortSliderPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout operationPanelLayout = new javax.swing.GroupLayout(operationPanel);
        operationPanel.setLayout(operationPanelLayout);
        operationPanelLayout.setHorizontalGroup(
            operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(securitySlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                    .addComponent(economySlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                    .addComponent(comfortSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        operationPanelLayout.setVerticalGroup(
            operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, operationPanelLayout.createSequentialGroup()
                .addComponent(securitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(economySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comfortSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(providerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(operationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(providerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(operationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void securitySliderPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_securitySliderPropertyChange
    }//GEN-LAST:event_securitySliderPropertyChange

    private void securitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_securitySliderStateChanged
        // update event filter
        if(!securitySlider.isEnabled()){
            return;
        }
        
        try {
            notifyActionProcessing(getOperationService().setSecurityEmphasis(((double) securitySlider.getValue()) / 100d));
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(new CouldNotPerformException("Could not set security value!", ex), logger);
        }
    }//GEN-LAST:event_securitySliderStateChanged

    private void economySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_economySliderStateChanged
        // update event filter
        if (!economySlider.isEnabled()) {
            return;
        }
        
        try {
            notifyActionProcessing(getOperationService().setEconomyEmphasis(((double) economySlider.getValue()) / 100d));
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(new CouldNotPerformException("Could not set economy value!", ex), logger);
        }
    }//GEN-LAST:event_economySliderStateChanged

    private void economySliderPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_economySliderPropertyChange
        
    }//GEN-LAST:event_economySliderPropertyChange

    private void comfortSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_comfortSliderStateChanged
        // update event filter
        if (!comfortSlider.isEnabled()) {
            return;
        }
        
        try {
            notifyActionProcessing(getOperationService().setComfortEmphasis(((double) comfortSlider.getValue()) / 100d));
        } catch (CouldNotPerformException ex) {
            ExceptionPrinter.printHistory(new CouldNotPerformException("Could not set comfort value!", ex), logger);
        }
    }//GEN-LAST:event_comfortSliderStateChanged

    private void comfortSliderPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_comfortSliderPropertyChange
        
    }//GEN-LAST:event_comfortSliderPropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar comfortBar;
    private javax.swing.JSlider comfortSlider;
    private javax.swing.JProgressBar economyBar;
    private javax.swing.JSlider economySlider;
    private javax.swing.JLabel emphasisLevelLabel;
    private javax.swing.JPanel emphasisLevelLabelPanel;
    private javax.swing.JPanel operationPanel;
    private javax.swing.JPanel providerPanel;
    private javax.swing.JProgressBar securityBar;
    private javax.swing.JSlider securitySlider;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void updateDynamicComponents() {
        if (hasOperationService()) {
            try {
                securitySlider.setEnabled(false);
                economySlider.setEnabled(false);
                comfortSlider.setEnabled(false);
                securitySlider.setValue((int) Math.round(getProviderService().getEmphasisState().getSecurity() * 100d));
                economySlider.setValue((int) Math.round(getProviderService().getEmphasisState().getEconomy() * 100d));
                comfortSlider.setValue((int) Math.round(getProviderService().getEmphasisState().getComfort() * 100d));
                securitySlider.setEnabled(true);
                economySlider.setEnabled(true);
                comfortSlider.setEnabled(true);
            } catch (CouldNotPerformException ex) {
                ExceptionPrinter.printHistory(ex, logger);
            }
            operationPanel.setEnabled(true);
        } else {
            operationPanel.setEnabled(false);
        }

        if (hasProviderService()) {
            try {
                final double security = (Double.isNaN(getProviderService().getEmphasisState().getSecurity()) ? 0 : getProviderService().getEmphasisState().getSecurity());
                final double economy = (Double.isNaN(getProviderService().getEmphasisState().getEconomy()) ? 0 : getProviderService().getEmphasisState().getEconomy());
                final double comfort = (Double.isNaN(getProviderService().getEmphasisState().getComfort()) ? 0 : getProviderService().getEmphasisState().getComfort());

                emphasisLevelLabel.setForeground(Color.WHITE);

                final Category emphasisCategory = getProviderService().getEmphasisCategory();
                switch (emphasisCategory) {
                    case SECURITY:
                        emphasisLevelLabel.setText(emphasisCategory.name());
                        emphasisLevelLabelPanel.setBackground(Color.BLUE.darker());
                        break;
                    case ECONOMY:
                        emphasisLevelLabel.setText(emphasisCategory.name());
                        emphasisLevelLabelPanel.setBackground(Color.GREEN.darker());
                        break;
                    case COMFORT:
                        emphasisLevelLabel.setText(emphasisCategory.name());
                        emphasisLevelLabelPanel.setBackground(Color.MAGENTA.darker());
                        break;
                    case SAFETY:
                    case UNKNOWN:
                        emphasisLevelLabel.setText("ERROR");
                        emphasisLevelLabelPanel.setBackground(Color.RED.darker());
                        break;
                }
                
                securityBar.setValue((int) Math.round(security * 100d));
                economyBar.setValue((int) Math.round(economy * 100d));
                comfortBar.setValue((int) Math.round(comfort * 100d));
                securityBar.setString(securityBar.getValue() + "% Security");
                economyBar.setString(economyBar.getValue() + "% Economy");
                comfortBar.setString(comfortBar.getValue() + "% Comfort");
            } catch (CouldNotPerformException ex) {
                ExceptionPrinter.printHistory(ex, logger, LogLevel.ERROR);
            }
            providerPanel.setEnabled(true);
        } else {
            providerPanel.setEnabled(false);
        }
    }
}
