#!/bin/bash

# configure exit on error
#set -e
#set -o pipefail


#!/bin/bash

# configure exit on error
#set -e
#set -o pipefail


# default config
NETWORK_NAME="bco-net"
SPREAD_NAME="spread"
BCO_NAME="bco"

# overwrite default config via config script
if [ -f /etc/bco/config ]; then
    . /etc/bco/config
fi

function stop() {
    if (check-bco) then
        echo stop bco
        docker stop -t 120 $BCO_NAME
    fi
}

function shutdown() {
    echo shutdown
    stop

    if (check-bco) then
        docker stop -t 120 $BCO_NAME
    fi

    if (check-spread) then
        docker stop -t 120 $SPREAD_NAME
    fi

    docker rm $BCO_NAME
    docker rm $SPREAD_NAME
}

function restart() {
    stop
    start
}

function check-spread() {
    docker container ls | grep -q $SPREAD_NAME
    return $?
}

function check-bco() {
    docker container ls | grep -q $BCO_NAME
    return $?
}

function check-network() {
    docker network ls | grep -q $NETWORK_NAME
    return $?
}

function check() {
    check-spread
    SPREAD_RUNNING=$?
    check-bco
    BCO_RUNNING=$?
    if [ $SPREAD_RUNNING == 0 ] && [ $BCO_RUNNING == 0 ] 
    then
        echo "Running"
        return 0
    elif [ $SPREAD_RUNNING == 1 ] && [ $BCO_RUNNING == 1 ]
    then
        echo "Stopped"
        return 1
    else
        echo "At least one component is not running" 
        return 1
    fi
}


function start() {
    
    # Setup network infrastructure
    if ! (check-network) then
        # Create a new docker network to be able to alias hosts
        docker network create $NETWORK_NAME
    fi

    # Start the spread host
    if ! (check-spread) then
        docker run -d --name=$SPREAD_NAME -p 4803:4803  --network=$NETWORK_NAME spread
        sleep 2
    fi

    # Start bco     
    if ! (check-bco) then
        docker run -d --name=$BCO_NAME                  --network=$NETWORK_NAME bco
    fi
    
}

function upgrade() {
    stop
    if ! (check-bco) then
        echo ready to perform the upgrade...
    else
        echo stop failed! Please try again...
        return 1
    fi

    echo start upgrade
    
    # do update
    # docker pull xyz

    start
}

function logo() {
    YEAR=$(date +'%Y')
    clear
    echo "                                 "
    echo "                             "
    echo "     #####    ####  #######      "
    echo "     ##  ##  ##     ##   ##      "
    echo "     #####   ##     ##   ##      "
    echo "     ##  ##  ##     ##   ##      "
    echo "     #####    ####  #######      "
    echo "     ======================      "
    echo ""
    echo "          openbase.org ${YEAR}    "
    echo "                     "
}

function bco-help() {
    
    echo -e "usage:"
    echo -e ""
    echo -e "    bco-launcher [ start | restart | stop | shutdown | check | upgrade | help ]"
    echo -e ""
    echo -e "where:"
    echo -e ""
    echo -e "    start     - starts the bco docker setup"
    echo -e "    restart   - restarts the bco docker setup"
    echo -e "    stop      - stops the bco docker setup"
    echo -e "    shutdown  - stops the bco docker setup and stops the docker middleware and network infrastructure."
    echo -e "    check     - returns 0 if everything is up and running otherwise a number > 0 is returned"
    echo -e "    upgrade   - stops the bco docker, upgrades the container and starts bco after success."
    echo -e "    help      - prints this help page"
    echo ""
}

# print logo
logo

# setup command terminator
eval set -- "$@ --"

# extract options and their arguments into variables.
while true ; do
    case "$1" in

        stop) stop ; shift ;;
        shutdown) shutdown ; shift ;;
        restart) restart ; shift ;;
        check) check ; shift ;;
        start) start ; shift ;;
        upgrade ) upgrade ; shift ;;
        help|-h|--help) bco-help ; exit 1 ;;
        --) shift ; break ;;
        *) echo "unknown command: $1" ; echo ; bco-help ; exit 1 ;;
    esac
done

