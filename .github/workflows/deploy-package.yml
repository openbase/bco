name: Publish package to the Maven Central Repository and GitHub Packages
on:
  release:
    types: [created]
jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Publish package
        uses: gradle/gradle-build-action@4137be6a8bf7d7133955359dbd952c0ca73b1021
        with:
          arguments: publish
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}











          steps:
            - name: Setup default environment
              run: |
                echo "MVN_ARGS=-Prelease,deploy -DskipTests=true" >> $GITHUB_ENV
            - name: Setup staging environment
              if: endsWith(github.ref, '/master')
              run: |
                echo "MVN_ARGS=-Pdev,release,deploy -DskipTests=true" >> $GITHUB_ENV
            - uses: actions/checkout@v2
            - name: Set up JDK 11
              uses: actions/setup-java@v1
              with:
                java-version: 11
                server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
                settings-path: ${{ github.workspace }}/.github/maven # location for the settings.xml file

            - name: Build with Maven
              run: mvn ${MVN_ARGS} -B package --file pom.xml

            - name: Set up Apache Maven Central
              uses: actions/setup-java@v1
              with: # running setup-java again overwrites the settings.xml
                java-version: 11
                server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
                server-username: MAVEN_CENTRAL_USERNAME # env variable for username in deploy
                server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
                gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
                gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

            - name: Publish to Apache Maven Central
              run: mvn ${MVN_ARGS} deploy -B
              env:
                MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
                MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
                MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
